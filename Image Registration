{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Image Registration","provenance":[],"authorship_tag":"ABX9TyPCZcObaNSSthOPJLMcrPdh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"L4n9u4Od9uD8","executionInfo":{"status":"ok","timestamp":1645609433235,"user_tz":-330,"elapsed":776,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}}},"outputs":[],"source":["import numpy as np\n","import cv2"]},{"cell_type":"code","source":["from google.colab.patches import cv2_imshow"],"metadata":{"id":"ExvuAem291Z6","executionInfo":{"status":"ok","timestamp":1645609444206,"user_tz":-330,"elapsed":510,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","file1=files.upload()"],"metadata":{"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":74},"id":"dpof9eaX92Vt","executionInfo":{"status":"ok","timestamp":1645609469823,"user_tz":-330,"elapsed":16020,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}},"outputId":"ce9640b6-89ff-494e-9187-0788ef873382"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-ac3d0a05-1d8a-4f36-946a-42b4d92c3613\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-ac3d0a05-1d8a-4f36-946a-42b4d92c3613\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving im1.jpg to im1.jpg\n"]}]},{"cell_type":"code","source":["img=cv2.imread('/content/im1.jpg',0)\n","cv2_imshow(img)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"lRAlLqHQ9-KL","executionInfo":{"status":"ok","timestamp":1645609640226,"user_tz":-330,"elapsed":30,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}},"outputId":"01a51101-53c6-4569-973a-66555e556895"},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<PIL.Image.Image image mode=L size=278x181 at 0x7F8B3E0AAE90>"]},"metadata":{}}]},{"cell_type":"code","source":["center = (width/2, height/2)\n","rotate_matrix = cv2.getRotationMatrix2D(center=center, angle=23, scale=1)\n","print(rotate_matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G8TFI6yLCckj","executionInfo":{"status":"ok","timestamp":1645610918176,"user_tz":-330,"elapsed":701,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}},"outputId":"cf7d298c-da70-4a39-d63a-dd0e0cf70c2f"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[[  0.92050485   0.39073113 -24.31134176]\n"," [ -0.39073113   0.92050485  61.50593762]]\n"]}]},{"cell_type":"code","source":["height, width = img.shape\n","theta=50\n","center = (width/2, height/2)\n","rotate_matrix = cv2.getRotationMatrix2D(center=center, angle=23, scale=1)\n","print(rotate_matrix)\n","#T=np.float32([[np.cos(theta), np.sin(theta), 1], [-np.sin(theta), np.cos(theta), 0]])\n","trns_img = cv2.warpAffine(img, rotate_matrix, (width, height))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yXsUQ1YE-Ujb","executionInfo":{"status":"ok","timestamp":1645611522995,"user_tz":-330,"elapsed":106,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}},"outputId":"a17dac91-42db-4501-f319-6fb280106e43"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[[  0.92050485   0.39073113 -24.31134176]\n"," [ -0.39073113   0.92050485  61.50593762]]\n"]}]},{"cell_type":"code","source":["cv2_imshow(trns_img)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"hS-gLDxeA6Js","executionInfo":{"status":"ok","timestamp":1645611522997,"user_tz":-330,"elapsed":82,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}},"outputId":"2b721fe1-9df4-4523-cc5d-2e3b283ba35f"},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<PIL.Image.Image image mode=L size=278x181 at 0x7F8B3C145C10>"]},"metadata":{}}]},{"cell_type":"code","source":["img1_color = cv2.imread(\"Align\")\n","img2_color = cv2.imread(\"ref.jpg\")\n"],"metadata":{"id":"kr73C2ZVBfUt","executionInfo":{"status":"ok","timestamp":1645612400608,"user_tz":-330,"elapsed":462,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["height, width = img.shape"],"metadata":{"id":"7PyfSI2tBKaU","executionInfo":{"status":"ok","timestamp":1645614983286,"user_tz":-330,"elapsed":512,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# Create ORB detector with 5000 features.\n","orb_detector = cv2.ORB_create(5000)\n","# Find keypoints and descriptors.\n","# The first arg is the image, second arg is the mask\n","#  (which is not required in this case).\n","kp1, d1 = orb_detector.detectAndCompute(img, None)\n","kp2, d2 = orb_detector.detectAndCompute(img, None)\n"," \n","# Match features between the two images.\n","# We create a Brute Force matcher with\n","# Hamming distance as measurement mode.\n","matcher = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck = True)\n"," \n","# Match the two sets of descriptors.\n","matches = matcher.match(d1, d2)\n"," \n","# Sort matches on the basis of their Hamming distance.\n","List = list(matches)\n","List.sort(key=lambda x: x.distance)\n","\n","#matches.sort(key = lambda x: x.distance)\n","# Take the top 90 % matches forward.\n","matches = matches[:int(len(matches)*0.9)]\n","no_of_matches = len(matches)\n","\n"],"metadata":{"id":"FoprIc7XJqeZ","executionInfo":{"status":"ok","timestamp":1645615170643,"user_tz":-330,"elapsed":634,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["# Define empty matrices of shape no_of_matches * 2.\n","p1 = np.zeros((no_of_matches, 2))\n","p2 = np.zeros((no_of_matches, 2))\n"," \n","for i in range(len(matches)):\n","  p1[i, :] = kp1[matches[i].queryIdx].pt\n","  p2[i, :] = kp2[matches[i].trainIdx].pt\n"," \n","# Find the homography matrix.\n","homography, mask = cv2.findHomography(p1, p2, cv2.RANSAC)\n"," \n","# Use this matrix to transform the\n","# colored image wrt the reference image.\n","transformed_img = cv2.warpPerspective(img1_color,homography, (width, height))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":208},"id":"WONBrnitKKxF","executionInfo":{"status":"error","timestamp":1645614831848,"user_tz":-330,"elapsed":586,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}},"outputId":"418837ea-03ed-42c9-e920-f67e092d1532"},"execution_count":33,"outputs":[{"output_type":"error","ename":"error","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-7f712233afe6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# Use this matrix to transform the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# colored image wrt the reference image.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mtransformed_img\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarpPerspective\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg1_color\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mhomography\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mwidth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31merror\u001b[0m: OpenCV(4.1.2) /io/opencv/modules/imgproc/src/imgwarp.cpp:3143: error: (-215:Assertion failed) _src.total() > 0 in function 'warpPerspective'\n"]}]},{"cell_type":"code","source":["# sort is on list only\n","List = list(matches)\n","List.sort(key=lambda x: x.distance)\n","matches = tuple(List)\n","# Take the top 90 % matches forward.\n","matches = matches[:int(len(matches) * 0.9)]\n","no_of_matches = len(matches)\n","\n","# Define empty matrices of shape no_of_matches * 2.\n","p1 = np.zeros((no_of_matches, 2))\n","p2 = np.zeros((no_of_matches, 2))\n","\n","for i in range(len(matches)):\n","p1[i,:] = kp1[matches[i].queryIdx].pt\n","p2[i,:] = kp2[matches[i].trainIdx].pt\n","\n","# Find the homography matrix.\n","homography, mask = cv2.findHomography(p1, p2, cv2.RANSAC)\n","\n","# Use this matrix to transform the\n","# colored image wrt the reference image.\n","transformed_img = cv2.warpPerspective(img1_color,homography, (width, height))\n","cv2.imshow('Reference',img2_color)\n","cv2.imshow('image-2',img1_color)\n","cv2.imshow(\"sd\",transformed_img)\n","cv2.waitKey()\n","cv2.destroyAllWindows()\n","\n","\"\"\"\n","# Take the top 90 % matches forward.\n","matches = matches[:int(len(matches) * 0.9)]\n","no_of_matches = len(matches)\n","\n","# Define empty matrices of shape no_of_matches * 2.\n","p1 = np.zeros((no_of_matches, 2))\n","p2 = np.zeros((no_of_matches, 2))\n","\n","for i in range(len(matches)):\n","p1[i, :] = kp1[matches[i].queryIdx].pt\n","p2[i, :] = kp2[matches[i].trainIdx].pt\n","\n","# Find the homography matrix.\n","homography, mask = cv2.findHomography(p1, p2, cv2.RANSAC)\n","\n","# Use this matrix to transform the\n","# colored image wrt the reference image.\n","transformed_img = cv2.warpPerspective(img1_color,homography, (width, height)) \"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":135},"id":"X8yyDTi-RFOK","executionInfo":{"status":"error","timestamp":1645615132190,"user_tz":-330,"elapsed":26,"user":{"displayName":"Ravindra Singh Kushwaha","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0iFOjKwd9moqm0TdQpDMryzPcj98gH4f72HQf=s64","userId":"17572499147597155278"}},"outputId":"c7cdcbf6-a85b-448d-c63f-f4336a001016"},"execution_count":36,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-36-ec42bdf6ec28>\"\u001b[0;36m, line \u001b[0;32m14\u001b[0m\n\u001b[0;31m    p1[i,:] = kp1[matches[i].queryIdx].pt\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block\n"]}]},{"cell_type":"code","source":["orb_detector = cv2.ORB_create(5000)\n","# Find keypoints and descriptors.\n","# The first arg is the image, second arg is the mask\n","# (which is not required in this case).\n","kp1, d1 = orb_detector.detectAndCompute(img1, None)\n","kp2, d2 = orb_detector.detectAndCompute(img2, None)\n","\n","# Match features between the two images.\n","# We create a Brute Force matcher with\n","# Hamming distance as measurement mode.\n","matcher = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)\n","\n","# Match the two sets of descriptors.\n","matches = matcher.match(d1, d2)\n","\n","# Sort matches on the basis of their Hamming distance.\n","# sort is on list only\n","List = list(matches)\n","List.sort(key=lambda x: x.distance)\n","matches = tuple(List)\n","# Take the top 90 % matches forward.\n","matches = matches[:int(len(matches) * 0.9)]\n","no_of_matches = len(matches)\n","\n","# Define empty matrices of shape no_of_matches * 2.\n","p1 = np.zeros((no_of_matches, 2))\n","p2 = np.zeros((no_of_matches, 2))\n","\n","for i in range(len(matches)):\n","p1[i, :] = kp1[matches[i].queryIdx].pt\n","p2[i, :] = kp2[matches[i].trainIdx].pt\n","\n","# Find the homography matrix.\n","homography, mask = cv2.findHomography(p1, p2, cv2.RANSAC)\n","\n","# Use this matrix to transform the\n","# colored image wrt the reference image.\n","transformed_img = cv2.warpPerspective(img1_color,homography, (width, height))\n"],"metadata":{"id":"jIYDQpKGS6N7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Tarun Kumar\n","\n","import cv2\n","import numpy as np\n","\n","img2_color = cv2.imread(\"Files/lena.jpg\") # Image to be aligned.\n","\n","\n","height, width = img2_color.shape[:2]\n","quarter_height, quarter_width = height / 4, width / 4\n","\n","center = (width / 2, height / 2)\n","\n","# using cv2.getRotationMatrix2D() to get the rotation matrix\n","rotate_matrix = cv2.getRotationMatrix2D(center=center, angle=45, scale=1)\n","# rotate the image using cv2.warpAffine\n","rotated_image = cv2.warpAffine(src=img2_color, M=rotate_matrix, dsize=(width, height))\n","\n","img1_color = rotated_image # Reference image.\n","# Convert to grayscale.\n","img1 = cv2.cvtColor(img1_color, cv2.COLOR_BGR2GRAY)\n","img2 = cv2.cvtColor(img2_color, cv2.COLOR_BGR2GRAY)\n","height, width = img2.shape\n","# Create ORB detector with 5000 features.\n","orb_detector = cv2.ORB_create(5000)\n","# Find keypoints and descriptors.\n","# The first arg is the image, second arg is the mask\n","# (which is not required in this case).\n","kp1, d1 = orb_detector.detectAndCompute(img1, None)\n","kp2, d2 = orb_detector.detectAndCompute(img2, None)\n","\n","# Match features between the two images.\n","# We create a Brute Force matcher with\n","# Hamming distance as measurement mode.\n","matcher = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)\n","\n","# Match the two sets of descriptors.\n","matches = matcher.match(d1, d2)\n","\n","# Sort matches on the basis of their Hamming distance.\n","# sort is on list only\n","List = list(matches)\n","List.sort(key=lambda x: x.distance)\n","matches = tuple(List)\n","# Take the top 90 % matches forward.\n","matches = matches[:int(len(matches) * 0.9)]\n","no_of_matches = len(matches)\n","\n","# Define empty matrices of shape no_of_matches * 2.\n","p1 = np.zeros((no_of_matches, 2))\n","p2 = np.zeros((no_of_matches, 2))\n","\n","for i in range(len(matches)):\n","p1[i, :] = kp1[matches[i].queryIdx].pt\n","p2[i, :] = kp2[matches[i].trainIdx].pt\n","\n","# Find the homography matrix.\n","homography, mask = cv2.findHomography(p1, p2, cv2.RANSAC)\n","\n","# Use this matrix to transform the\n","# colored image wrt the reference image.\n","transformed_img = cv2.warpPerspective(img1_color,homography, (width, height))\n","cv2.imshow('Reference',img2_color)\n","cv2.imshow('image-2',img1_color)\n","cv2.imshow(\"sd\",transformed_img)\n","cv2.waitKey()\n","cv2.destroyAllWindows()\n","\n","\"\"\"\n","# Take the top 90 % matches forward.\n","matches = matches[:int(len(matches) * 0.9)]\n","no_of_matches = len(matches)\n","\n","# Define empty matrices of shape no_of_matches * 2.\n","p1 = np.zeros((no_of_matches, 2))\n","p2 = np.zeros((no_of_matches, 2))\n","\n","for i in range(len(matches)):\n","p1[i, :] = kp1[matches[i].queryIdx].pt\n","p2[i, :] = kp2[matches[i].trainIdx].pt\n","\n","# Find the homography matrix.\n","homography, mask = cv2.findHomography(p1, p2, cv2.RANSAC)\n","\n","# Use this matrix to transform the\n","# colored image wrt the reference image.\n","transformed_img = cv2.warpPerspective(img1_color,homography, (width, height)) \"\"\""],"metadata":{"id":"jtBU-nXaSnh1"},"execution_count":null,"outputs":[]}]}