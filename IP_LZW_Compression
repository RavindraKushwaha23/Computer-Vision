{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"IP_LZW_Compression","provenance":[],"authorship_tag":"ABX9TyM+Btq81WsSbqDs67FBCVv6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["*    PSEUDOCODE\n","1    Initialize table with single character strings\n","2    OLD = first input code\n","3    output translation of OLD\n","4    WHILE not end of input stream\n","5        NEW = next input code\n","6        IF NEW is not in the string table\n","7               S = translation of OLD\n","8               S = S + C\n","9       ELSE\n","10              S = translation of NEW\n","11       output S\n","12       C = first character of S\n","13       OLD + C to the string table\n","14       OLD = NEW\n","15   END WHILE"],"metadata":{"id":"MOgOrcIcWwKR"}},{"cell_type":"code","source":["*    PSEUDOCODE\n","1    Initialize table with single character strings\n","2    OLD = first input code\n","3    output translation of OLD\n","4    WHILE not end of input stream\n","5        NEW = next input code\n","6        IF NEW is not in the string table\n","7               S = translation of OLD\n","8               S = S + C\n","9       ELSE\n","10              S = translation of NEW\n","11       output S\n","12       C = first character of S\n","13       OLD + C to the string table\n","14       OLD = NEW\n","15   END WHILE"],"metadata":{"id":"Dhdge7GFW1xU"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nE0DXM0WPgWh","executionInfo":{"status":"ok","timestamp":1649241486396,"user_tz":-330,"elapsed":450,"user":{"displayName":"Ravindra Singh Kushwaha","userId":"17572499147597155278"}},"outputId":"48b13453-1dea-4758-dbb9-a1e39168c246"},"outputs":[{"output_type":"stream","name":"stdout","text":["[97, 98, 256, 258, 257, 257]\n","abababababa\n"]}],"source":["def compress(uncompressed):\n","    \"\"\"Compress a string to a list of output symbols.\"\"\"\n"," \n","    # Build the dictionary.\n","    dict_size = 256\n","    dictionary = dict((chr(i), i) for i in range(dict_size))\n","    # in Python 3: dictionary = {chr(i): i for i in range(dict_size)}\n"," \n","    w = \"\"\n","    result = []\n","    for c in uncompressed:\n","        wc = w + c\n","        if wc in dictionary:\n","            w = wc\n","        else:\n","            result.append(dictionary[w])\n","            # Add wc to the dictionary.\n","            dictionary[wc] = dict_size\n","            dict_size += 1\n","            w = c\n"," \n","    # Output the code for w.\n","    if w:\n","        result.append(dictionary[w])\n","    return result\n"," \n"," \n","def decompress(compressed):\n","    \"\"\"Decompress a list of output ks to a string.\"\"\"\n","    from io import StringIO\n"," \n","    # Build the dictionary.\n","    dict_size = 256\n","    dictionary = dict((i, chr(i)) for i in range(dict_size))\n","    # in Python 3: dictionary = {i: chr(i) for i in range(dict_size)}\n"," \n","    # use StringIO, otherwise this becomes O(N^2)\n","    # due to string concatenation in a loop\n","    result = StringIO()\n","    w = chr(compressed.pop(0))\n","    result.write(w)\n","    for k in compressed:\n","        if k in dictionary:\n","            entry = dictionary[k]\n","        elif k == dict_size:\n","            entry = w + w[0]\n","        else:\n","            raise ValueError('Bad compressed k: %s' % k)\n","        result.write(entry)\n"," \n","        # Add w+entry[0] to the dictionary.\n","        dictionary[dict_size] = w + entry[0]\n","        dict_size += 1\n"," \n","        w = entry\n","    return result.getvalue()\n"," \n"," \n","# How to use:\n","compressed = compress('abababababa')\n","print (compressed)\n","decompressed = decompress(compressed)\n","print (decompressed)"]},{"cell_type":"code","source":[""],"metadata":{"id":"lk1olUHXR4DQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["st = \"abababababa\"\n","dic = {'a':0, 'b':1}\n"],"metadata":{"id":"_wEzcfTSQ9qV","executionInfo":{"status":"ok","timestamp":1649240138144,"user_tz":-330,"elapsed":670,"user":{"displayName":"Ravindra Singh Kushwaha","userId":"17572499147597155278"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["encoded_data= []"],"metadata":{"id":"7mM-KF1SSABP","executionInfo":{"status":"ok","timestamp":1649240143323,"user_tz":-330,"elapsed":524,"user":{"displayName":"Ravindra Singh Kushwaha","userId":"17572499147597155278"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["len(dic.keys())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GbFSUx0bSplN","executionInfo":{"status":"ok","timestamp":1649240145667,"user_tz":-330,"elapsed":573,"user":{"displayName":"Ravindra Singh Kushwaha","userId":"17572499147597155278"}},"outputId":"4660266c-8ba8-42f7-fa69-6c3b7ab28c77"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["p = st[0]\n","l1 = len(st)\n","k=1\n","while k!=l1:\n","  c = st[k]\n","  print(c)\n","  if p+c not in dic:\n","    p=p+c\n","    print(p)\n","  else:\n","    encoded_data.append(dic[p])\n","    dic[p+c]= len(dic.keys())+1\n","    p=c\n","    k+=1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZLGqqgjHXCYY","executionInfo":{"status":"ok","timestamp":1649240149933,"user_tz":-330,"elapsed":512,"user":{"displayName":"Ravindra Singh Kushwaha","userId":"17572499147597155278"}},"outputId":"91db7aff-4f1f-445d-a225-36637ac0d246"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["b\n","a\n","b\n","ab\n","b\n","a\n","ba\n","a\n","b\n","ab\n","b\n","abb\n","b\n","a\n","ba\n","a\n","baa\n","a\n","b\n","ab\n","b\n","abb\n","b\n","abbb\n","b\n","a\n","ba\n","a\n","baa\n","a\n","baaa\n","a\n","b\n","ab\n","b\n","abb\n","b\n","abbb\n","b\n","abbbb\n","b\n","a\n","ba\n","a\n","baa\n","a\n","baaa\n","a\n","baaaa\n","a\n"]}]},{"cell_type":"code","source":["print(encoded_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BwTuBxdWYCei","executionInfo":{"status":"ok","timestamp":1649240197227,"user_tz":-330,"elapsed":481,"user":{"displayName":"Ravindra Singh Kushwaha","userId":"17572499147597155278"}},"outputId":"e2af939a-dc51-434e-e1de-10b807c4a681"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 1, 3, 4, 5, 6, 7, 8, 9, 10]\n"]}]},{"cell_type":"code","source":["def lzw(inp, string, out):\n","#dictionary = {chr(i):i for i in range(97,123)}\n","  dictionary = {'a':0,'b':1}\n","\n","  last = len(dictionary)\n","  p = \"\"\n","  result = []\n","\n","  for c in string:\n","    pc = p+c\n","  if pc in dictionary:\n","    p = pc\n","    print('Chceking for: ',p)\n","  else:\n","    result.append(dictionary[p])\n","    dictionary[pc] = last\n","    last += 1\n","    p = c\n","\n","  if p != '':\n","    result.append(dictionary[p])\n","  return result,dictionary\n","\n","inp = \"ababababa\"\n","out, dic = lzw(inp)\n","print('\\nInput: ',inp)\n","print('\\nOutput Encoded: ',out)\n","print('\\nDictionary: ',dic)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"0snGl6k6SD0w","executionInfo":{"status":"error","timestamp":1649241227980,"user_tz":-330,"elapsed":483,"user":{"displayName":"Ravindra Singh Kushwaha","userId":"17572499147597155278"}},"outputId":"11cbfb16-7cac-4368-db42-85ce63a08bd2"},"execution_count":28,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-ec556a33afae>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0minp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"ababababa\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdic\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlzw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nInput: '\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nOutput Encoded: '\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: lzw() missing 2 required positional arguments: 'string' and 'out'"]}]}]}